// -----------------Prefs-----------------

$ket::Port = 7654;

// -----------------Changelog-----------------

// v0.1 - Added ability to convert and reconvert CSX files from within the level editor.
// v0.2 - Replaced HTTP with TCP and added an automatic conversion feature.
//      - Added more error handling.

// -----------------Editor-----------------

package ket {
  function EWorldEditor::buildSpecialNone(%this) {
    Parent::buildSpecialNone(%this);
    if($ket::DisablePause)
      %this.addSpecial("Enable Pause", "$ket::DisablePause = 0; EWorldEditor.clearSpecial(); EWorldEditor.buildSpecialNone();");
    else
      %this.addSpecial("Disable Pause", "$ket::DisablePause = 1; EWorldEditor.clearSpecial(); EWorldEditor.buildSpecialNone();");
    %this.addSpecial("Reconnect KET", "createKetConnection();");
    %this.addSpecial("Convert CSX...", "ketConnection.OpenCSX();");
  }
  function EWorldEditor::buildSpecialSingle(%this) {
    Parent::buildSpecialSingle(%this);
    if(%this.interiorSelected()) {
      %this.addSpecial("Remake", "ketConnection.RemakeInterior();");
      if(%this.getSelectedObject(0)._autoRemakeEnabled)
        %this.addSpecial("Disable Auto-Remake", "ketConnection.DisableAutoRemake(); EWorldEditor.clearSpecial(); EWorldEditor.buildSpecialSingle();");
      else
        %this.addSpecial("Enable Auto-Remake", "ketConnection.EnableAutoRemake(); EWorldEditor.clearSpecial(); EWorldEditor.buildSpecialSingle();");
    }
  }
  function onMissionEnded() {
    Parent::onMissionEnded();
    if(isObject(InteriorWatchArray)) {
      ketConnection.sendCommand("stopWatchingAll");
      InteriorWatchArray.delete();
    }
  }
  function escapeFromGame(%val) {
    Parent::escapeFromGame(%val);
    if($ket::DisablePause)
      $gamePaused = false;
  }
};

function EWorldEditor::interiorSelected(%this) {
  return %this.getSelectionSize() == 1 && %this.getSelectedObject(0).interiorFile !$= "";
}

// -----------------ketConnection-----------------

function createKetConnection() {
  if(isObject(ketConnection)) {
    ketConnection.disconnect();
    ketConnection.delete();
  }
  %obj = new TCPObject(ketConnection);
  %obj.connect("localhost:" @ $ket::Port);
  %obj.sendCommand("checkConnection");
  %obj.removeWatch();
}

function ketConnection::onConnected(%this) {
  %this.sendCommand("checkConnection");
}

function ketConnection::checkConnectionSuccessful(%this) {
  messageBoxOK("Success", "Connected with Python server");
}

function ketConnection::onConnectFailed(%this) {
  messageBoxOK("No connection", "Couldn't connect to the Python script (make sure you have it open).");
}

function ketConnection::onDisconnect(%this) {
  messageBoxOK("KET Disconnected", "The Python server was closed or an error occurred.");
  %this.removeWatch();
  %this.delete();
}

function ketConnection::success(%this) {
  eval (%this @ "." @ %this.action @ "Successful();");
}

function ketConnection::error(%this, %message) {
  messageBoxOK("Error", "From Python:" SPC %message);
}

function ketConnection::onLine(%this, %line) {
  echo(%line);
  %status = firstWord(%line);
  %message = restWords(%line);
  switch$ (%status) {
    case "Success:":
      %this.success();
    case "Modified:":
      %this.autoRemake(%message);
    case "Error:":
      %this.error(%message);
  }
}

function ketConnection::sendCommand(%this, %action, %arg1) {
  %this.action = %action;
  %this.send(%action @ "|" @ %arg1);
}

// -----------------Resource Management-----------------

function createBlank(%filePath) {
  %touch = new FileObject();
  %touch.openForWrite(%filePath);
  %touch.close();
  %touch.delete();
}

function resetFile(%filePath) {
  eval ("delete" @ "File(" @ %filePath @ ");");
  createBlank(%filePath);
}

// -----------------Convert CSX-----------------

function findCSX(%obj) {
  if(%obj._csx !$= "")
    return %obj._csx;
  
  %adjcsx = strreplace(%obj.interiorFile, ".dif", ".csx");
  if(!isFile(%adjcsx)) {
    setModPaths(getModPaths());
    if(!isFile(%adjcsx)) {
      messageBoxOK("No CSX", "Could not find csx file" SPC %adjcsx @ ".");
      return;
    }
  }
  %obj._csx = %adjcsx;
  
  return %adjcsx;
}

function ketConnection::OpenCSX(%this) {
  setModPaths(getModPaths());
  getLoadFilename("~/data/interiors*/*.csx", "ketConnection.convertCSX");
}

function ketConnection::convertCSX(%this, %file) {
  %this.noteInterior();
  %this.interiorFile = strreplace(%file, ".csx", ".dif");
  createBlank(%this.interiorFile);
  %this.sendCommand("convertCSX", %file);
}

function ketConnection::convertCSXSuccessful(%this) {
  %obj = %this.createInterior();
  EWorldEditor.clearSelection();
  EditorTree.onSelect(%obj);
  LocalClientConnection.player.setTransform(%this.marbleTransform);
}

// -----------------Remake-----------------

function InteriorInstance::fileInUse(%this) {
  for(%i = 0; %i < MissionGroup.getCount(); %i++) {
    %obj = MissionGroup.getObject(%i);
    if(%obj.getID() != %this.getID() && %obj.interiorFile $= %this.interiorFile) {
      messageBoxOK("Error", "The DIF file" SPC fileName(%this.interiorFile) SPC "cannot be modified because it's currently in use by other interiors. (Let me know if you want this changed)");
      return true;
    }
  }
  return false;
}

function ketConnection::noteInterior(%this, %obj) {
  %this.interiorTransform = %obj.getTransform();
  %this.interiorScale = %obj.scale;
  %this.interiorName = %obj.getName();
  %this.interiorFile = %obj.interiorFile;
  %this.path = %obj.path;
  %this._autoRemakeEnabled = %obj._autoRemakeEnabled;
  %this._csx = %obj._csx;
}

function ketConnection::createInterior(%this) {
  %obj = new InteriorInstance(%this.interiorName) {
    scale = %this.interiorScale;
    interiorFile = %this.interiorFile;
    path = %this.path;
    _autoRemakeEnabled = %this._autoRemakeEnabled;
    _csx = %this._csx;
  };
  %obj.setTransform(%this.interiorTransform);
  MissionGroup.add(%obj);
  
  if(%obj._autoRemakeEnabled)
    InteriorWatchArray.addEntry(%obj);
  
  if(%obj.path !$= "")
    %obj.moveOnPath(%obj.path);
  
  return %obj;
}

function ketConnection::RemakeInterior(%this, %obj) {
  %this.marbleTransform = LocalClientConnection.player.getTransform();
  if(%obj $= "")
    %obj = EWorldEditor.getSelectedObject(0);
  if(!%obj.fileInUse()) {
    %csx = findCSX(%obj);
    if(%csx !$= "") {
      if(%obj._autoRemakeEnabled)
        InteriorWatchArray.removeMatching(%obj);
      %this.noteInterior(%obj);
      %obj.delete();
      resetFile(%this.interiorFile);
      %this.sendCommand("convertCSX", %csx);
    }
  }
}

// -----------------Auto Remake-----------------

function ketConnection::EnableAutoRemake(%this) {
  %obj = EWorldEditor.getSelectedObject(0);
  if(!%obj.fileInUse()) {
    %csx = findCSX(%obj);
    if(%csx !$= "") {
      %obj._autoRemakeEnabled = true;
      
      if(!isObject(InteriorWatchArray))
        Array(InteriorWatchArray);
      InteriorWatchArray.addEntry(%obj);
      
      %this.sendCommand("watchCSX", %csx);
    }
  }
}

function ketConnection::DisableAutoRemake(%this, %obj) {
  if(%obj $= "")
    %obj = EWorldEditor.getSelectedObject(0);
  %obj._autoRemakeEnabled = false;
  InteriorWatchArray.removeMatching(%obj);
  %this.sendCommand("stopWatchingCSX", findCSX(%obj));
}

function ketConnection::autoRemake(%this, %file) {
  for(%i = 0; %i < InteriorWatchArray.getSize(); %i++) {
    %obj = InteriorWatchArray.getEntry(%i);
    if(isObject(%obj)) {
      %csx = findCSX(%obj);
      if(%csx $= %file) {
        %this.RemakeInterior(%obj);
        %found = true;
      }
    }
    else {
      InteriorWatchArray.removeEntry(%i);
      echo("Removed a deleted interior from the watch list");
      %i--;
    }
  }
  if(!%found) {
    %this.sendCommand("stopWatchingCSX", %file);
    messageBoxOK("Note", fileName(%file) SPC "was changed but was not found in this mission, so it has been removed from the watch list.");
  }
}

function ketConnection::removeWatch(%this) {
  if(isObject(InteriorWatchArray)) {
    for(%i = 0; %i < InteriorWatchArray.getSize(); %i++) {
      InteriorWatchArray.getEntry(%i)._autoRemakeEnabled = false;
    }
    InteriorWatchArray.delete();
  }
}

// -----------------Finalize-----------------

activatePackage(ket);
createKetConnection();

return;

//--- OBJECT WRITE BEGIN ---
new SimGroup(MissionGroup) {
   new ScriptObject(MissionInfo) {
         artist = "Keppy";
         desc = "Activates KET." NL "This is the second release, which includes automatically converting CSX files in the editor.";
         game = "PlatinumQuest";
         name = "Keppy's Editor Tools";
         type = "Custom";
   };
};
//--- OBJECT WRITE END ---
