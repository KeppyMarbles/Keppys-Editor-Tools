$ketPort = 7654;

// -----------------Specials-----------------

package ket {
  function EWorldEditor::buildSpecialNone(%this) {
    Parent::buildSpecialNone(%this);
    %this.addSpecial("Convert CSX...", "createKETConnection(); ketConnection.OpenCSX();");
  }
  function EWorldEditor::buildSpecialSingle(%this) {
    Parent::buildSpecialSingle(%this);
    if(%this.interiorSelected()) {
      %this.addSpecial("Reconvert", "createKETConnection(); ketConnection.RemakeInterior();");
    }
  }
};
activatePackage(ket);

function EWorldEditor::interiorSelected(%this) {
  return %this.getSelectionSize() == 1 && %this.getSelectedObject(0).interiorFile !$= "";
}

// -----------------ketConnection-----------------

function createKETConnection() {
  if(isObject(ketConnection))
    ketConnection.delete();
  
  new HTTPObject(ketConnection);
  ketConnection.response = false;
}

function ketConnection::onLine(%this, %line) {
  %this.response = true;
  %status = firstWord(%line); 
  if(%status $= "Success:") {
    echo(%line);
    eval (%this @ "." @ %this.action @ "Successful();");
  }
  else if (%status $= "Error:") {
    %error = removeWord(%line, 0);
    error(%error);
    messageBoxOK("Error", "From Python:" SPC %error);
  }
}

function ketConnection::sendCommand(%this, %action, %arg1, %arg2) {
  if(%action $= "")
    return;
  if(%arg1 $= "")
    %arg1 = "None";
  %query = "action=" @ %action @ "&args=" @ %arg1 @ "&args=" @ %arg2;
  echo("Sending action" SPC %action SPC "with arguments" SPC %arg1 SPC %arg2);
  %this.get("localhost:" @ $ketPort, "", %query);
  %this.action = %action;
}

// -----------------Resource Management-----------------

function createBlank(%filePath) {
  %touch = new FileObject();
  %touch.openForWrite(%filePath);
  %touch.close();
  %touch.delete();
}

function resetFile(%filePath) {
  eval ("delete" @ "File(" @ %filePath @ ");");
  createBlank(%filePath);
}

// -----------------Convert CSX-----------------

function findCSX(%interiorFile) {
  %adjcsx = strreplace(%interiorFile, ".dif", ".csx");
  if(!isFile(%adjcsx))
    setModPaths(getModPaths());
  if(!isFile(%adjcsx)) {
    messageBoxOK("No CSX", "Could not find csx file" SPC %adjcsx @ ".");
    return;
  }
  return %adjcsx;
}

function ketConnection::OpenCSX(%this) {
  setModPaths(getModPaths());
  getLoadFilename("~/data/interiors*/*.csx", "ketConnection.convertCSX");
}

function ketConnection::convertCSX(%this, %file) {
  %this.interiorFile = strreplace(%file, ".csx", ".dif");
  createBlank(%this.interiorFile);
  %this.sendCommand("convertCSX", %file);
}

function ketConnection::convertCSXSuccessful(%this) {
  %obj = %this.createInterior();
  EWorldEditor.clearSelection();
  EditorTree.onSelect(%obj);
}

// -----------------Remake-----------------

function difInUse(%obj) {
  for(%i = 0; %i < MissionGroup.getCount(); %i++) {
    %mobj = MissionGroup.getObject(%i);
    if(%mobj.getID() == %obj.getID())
      continue;
    
    if(%mobj.interiorFile $= %obj.interiorFile) {
      messageBoxOK("Error", "The DIF file cannot be modified because it's currently in use by other interiors. (Let me know if you want this changed)");
      return true;
    }
  }
  return false;
}

function ketConnection::noteInterior(%this, %obj) {
  %this.interiorTransform = %obj.getTransform();
  %this.interiorScale = %obj.scale;
  %this.interiorName = %obj.getName();
  %this.interiorFile = %obj.interiorFile;
}

function ketConnection::createInterior(%this) {
  %obj = new InteriorInstance(%this.interiorName) {
    scale = %this.interiorScale;
    interiorFile = %this.interiorFile;
  };
  %obj.setTransform(%this.interiorTransform);
  return %obj;
}

function ketConnection::RemakeInterior(%this, %obj) {
  if(%obj $= "")
    %obj = EWorldEditor.getSelectedObject(0);
  
  if(difInUse(%obj))
    return;
  
  %csx = findCSX(%obj.interiorFile);
  if(%csx !$= "") {
    %this.noteInterior(%obj);
    %obj.delete();
    resetFile(%this.interiorFile);
    %this.sendCommand("convertCSX", %csx);
  }
}

// -----------------Error Handling-----------------

function ketConnection::onDisconnect(%this) {
  if(!%this.response) {
    if(%this.action $= "checkConnection")
      messageBoxOK("No connection", "Couldn't connect to the Python script (make sure you have it open).");
    else
      messageBoxOK("Error", "Did not get a response from Python when attempting:" SPC %this.action);
  }
  %this.delete();
}

function ketConnection::checkConnection(%this) {
  %this.sendCommand("checkConnection");
}

function ketConnection::checkConnectionSuccessful(%this) {
  echo("KET is active");
}

function testError() {
  createKETConnection();
  ketConnection.get("localhost:" @ $ketPort, "", "action=None&args=");
}

// -----------------Finalize-----------------

createKETConnection();
ketConnection.checkConnection();

return;

//--- OBJECT WRITE BEGIN ---
new SimGroup(MissionGroup) {
   new ScriptObject(MissionInfo) {
         artist = "Keppy";
         desc = "Activates KET." NL "This is the first release, which includes converting CSX files in the editor.";
         game = "PlatinumQuest";
         name = "Keppy's Editor Tools v0.1";
         type = "Custom";
   };
};
//--- OBJECT WRITE END ---
